# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

#********************** VARIABLES ********************** #
variables:
#************ PROJECT COMMON - WORKLOAD IDENTITY FEDERATION ************
PROJECT_ID        : "CHANGEME"
PROJECT_NUMBER    : "CHANGEME"
POOL_ID           : "CHANGEME"
PROVIDER_ID       : "CHANGEME"
SERVICE_ACCOUNT_EMAIL: "CHANGEME"


#************************ STAGES *********************** #
stages:
  - auth
  - provision


#********************** STAGE 1: AUTH *********************** #
1-gcp-auth:
  stage: auth
  image: google/cloud-sdk:slim
  script:
    - echo ${CI_JOB_JWT_V2} > .ci_job_jwt_file
    - gcloud iam workload-identity-pools create-cred-config ${PROVIDER_ID}
      --service-account="${SERVICE_ACCOUNT_EMAIL}"
      --output-file=.gcp_temp_cred.json
      --credential-source-file=.ci_job_jwt_file
    - gcloud auth login --cred-file=`pwd`/.gcp_temp_cred.json
    - gcloud auth list

2-gcp-token:
  stage: auth
  image: dwdraju/alpine-curl-jq
  script:
    - chmod +x run_wif_gcp.sh
    - ./run_wif_gcp.sh $PROJECT_NUMBER $POOL_ID $PROVIDER_ID $SERVICE_ACCOUNT_EMAIL >> 2-gcp-token.env
  artifacts:
    reports:
      dotenv: 2-gcp-token.env


#********************** STAGE 2: USE *********************** #
1-config-plan:
  stage: provision
  image: hashicorp/terraform
  script:
    - cd 2-use-wif
    - echo "***** ACCESS_TOKEN *****"
    - echo "$ACCESS_TOKEN"
    - terraform init
    - |-
        terraform apply -auto-approve \
                        -var="access_token=$ACCESS_TOKEN" \
                        -var="project_id=$PROJECT_ID"
  dependencies:
    - 2-gcp-token

2-config-apply:
  stage: provision
  image: hashicorp/terraform
  script:
    - cd 2-use-wif
    - echo "***** ACCESS_TOKEN *****"
    - echo "$ACCESS_TOKEN"
    - terraform init
    - |-
        terraform apply -auto-approve \
                        -var="access_token=$ACCESS_TOKEN" \
                        -var="project_id=$PROJECT_ID"
  dependencies:
    - 2-gcp-token
